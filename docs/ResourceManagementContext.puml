@startuml
package swiftport-backend as swiftport_backend  {
    ' Bounded Context
    'ignora queries y commands

    package resource {
        package domain {
            package model{
              package aggregates {
                class Zone {
                  + int id
                  + String name
                  + TenantId tenantId
                  --
                  + void addLocation(Location location)
                  + List<Location> getLocations()
                }

                class Position {
                  + int id
                  + String title
                  + String description
                  + TenantId tenantId
                  --
                  + void updateDetails(String title, String description)
                }

                class Employee {
                  + int id
                  + Dni dni
                  + FullName name
                  + ContactInfo contact
                  + int positionId
                  + Availability availability
                  + TenantId tenantId
                  --
                  + void updateContactInfo(ContactInfo newContact)
                  + void changeAvailability(Availability newAvailability)
                }

                class Equipment {
                  + int id
                  + String code
                  + String name
                  + String plate
                  + int capacityLoad
                  + int capacityPax
                  + Availability availability
                  + List<Photo> photos
                  + TenantId tenantId
                  --
                  + void changeAvailability(Availability newAvailability)
                  + void addPhoto(EquipmentPhoto photo)
                  + void removePhoto(String publicId)
                }

                class Team {
                  + int id
                  + DateTime date
                  + TenantId tenantId
                  --
                  + void addMember(TeamMember member)
                  + void removeMember(int employeeId)
                  + void validateMembersUnique()
                }

                class Reservation {
                  + int id
                  + TenantId tenantId
                  + ResourceReference resourceRef
                  + DateRange dateRange
                  + DateTime createdAt
                  --
                  + static Reservation create(CreateReservationCommand cmd)
                  + boolean conflictsWith(DateRange other)
                }
               }

              package entities {
                class Location {
                  + int id
                  + String name
                }

                class TeamMember {
                  + int Id
                  + int employeeId
                }
              }

              package valueobjects {
                class Dni {
                  - String value
                  + Dni(String value)
                  + String getValue()
                }
                class FullName {
                  - String firstName
                  - String lastName
                  + String getFullName()
                }
                class ContactInfo {
                  - String email
                  - String phoneNumber
                  + String getEmail()
                  + String getPhoneNumber()
                }
                class Availability {
                  - enum { Available, Unavailable, Reserved, Vacation } value
                  + Availability value()
                }
                class ResourceReference {
                  - ResourceType type
                  - int resourceId
                  + ResourceType getType()
                  + int getResourceId()
                }
                class DateRange {
                  - DateTime start
                  - DateTime end
                  + boolean overlaps(DateRange other)
                }
              }

              package events {
                class ResourceReservedEvent {
                  + int reservationId
                  + ResourceReference resourceRef
                  + DateRange dateRange
                }
              }

          package commands {
            class CreateReservationCommand {
            int resourceId, ResourceType type, DateTime start, DateTime end
            }
          }

          package queries {
            class GetReservationsByResourceQuery{
            int resourceId, ResourceType type, DateTime start, DateTime end
            }
          }
        }

        package domain.services {
          interface ReservationService {
            + void reserve(CreateReservationCommand cmd)
            + List<Reservation> findOverlapping(GetReservationsByResourceQuery q)
          }
        }
        }
        package infrastructure {
            package persistence {
                package jpa {
                    ' Interfaces que implementan el patrón Repository para la persistencia de datos
                }
            }
        }
        package application {
            package internal {
                package commandservices {
                    ' Clases que implementan las interfaces de servicios de comandos, ejecutando lógica de negocios relacionada con cambios de estado
                }
                package queryservices {
                    ' Clases que implementan las interfaces de servicios de consultas, para la obtención de datos del sistema
                }
            }
        }
        package interfaces {
            package rest {
                package resources {
                    ' Clases de tipo record que funcionan como DTOs (Data Transfer Objects), siguiendo los principios REST (se tratan como recursos)
                }
                package transform {
                    ' Clases con métodos estáticos para mapear entre recursos, comandos, consultas o entidades
                    ' Equivalente al patrón Assembler, puede ser denominado de esta manera
                }
                package controllers {
                    ' Clases que exponen los endpoints REST del sistema, permitiendo la interacción con el cliente
                }
            }
        }
    }
    package shared{
        package domain.model{
            package aggregates{
                class AuditableAbstractAggregateRoot {
                    ' Clase base para los agregados auditable, gestionando operaciones comunes
                }
            }
            package entities {
                class AuditableModel{
                    ' Entidad base que permite rastrear la auditoría de los cambios en los modelos
                }
            }
            package valueobjects {
                class TenantId {
                    'ujum'
                }
                class Photo{
                }

            }
        }
        package infrastructure.persistence.jpa.strategy {
            class SnakeCasePhysicalNamingStrategy {
                ' Estrategia de nombrado físico que convierte los identificadores a formato snake_case en la base de datos
                + Identifier toPhysicalCatalogName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                + Identifier toPhysicalSchemaName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                + Identifier toPhysicalTableName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                + Identifier toPhysicalSequenceName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                + Identifier toPhysicalColumnName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                - Identifier toSnakeCase(final Identifier identifier)
                - Identifier toSnakeCase(final Identifier identifier)
            }
        }
    }
}

package org.hibernate.boot.model.naming {
    interface PhysicalNamingStrategy {
        ' Interfaz para la estrategia de nombrado físico, utilizada para personalizar los nombres de las entidades en la base de datos
    }
}

@enduml
