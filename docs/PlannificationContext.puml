@startuml
package swiftport-backend as swiftport_backend  {
    ' Bounded Context
    package planification {
        package domain.model {
          package aggregates {
            class Activity <<Aggregate>> {
              + int Id
              + ActivityCode code
              + String description
              + DateTime expectedDate
              + int weekNumber
              + ActivityType type
              + LocationRef origin
              + LocationRef destination
              + TenantId tenantId
              --
              + List<Task> tasks
              + void addTask(Task task)
              + List<Task> getTasks()
              + ActivityStatus getStatus()
              + void updateStatus(ActivityStatus newStatus)
            }
          }

          package entities {
            class Task <<Entity>> {
              + int Id
              + String description
              + TaskStatus status
              + List<TaskProgramming> programmings
              --
              + void addTaskProgramming(TaskProgramming tp)
              + List<TaskProgramming> getProgrammings()
              + boolean hasOverlap(DateRange range)
            }

            class TaskProgramming <<Entity>> {
              + int Id
              + List<ResourceReference> resourceRefs
              + DateRange scheduledPeriod
              + ProgrammingStatus status
              + DateTime createdAt
              --
              + boolean overlaps(DateRange other)
              + void updateStatus(ProgrammingStatus newStatus)
            }
          }

          package valueobjects {
            ' Shared Kernel VO
            class TenantId {
              - int value
              + TenantId(int value)
              + int getValue()
            }

            class ActivityCode {
              - String value
              + static ActivityCode of(String value)
              + String getValue()
            }

            class DateRange {
              - DateTime start
              - DateTime end
              + boolean overlaps(DateRange other)
            }

            class LocationRef {
              - int zoneId
              - int locationId
              + LocationRef(int zoneId, int locationId)
              + int getZoneId()
              + int getLocationId()
            }

            class ResourceReference {
              - ResourceType type
              - int resourceId
              + ResourceReference(ResourceType type, int resourceId)
              + ResourceType getType()
              + int getResourceId()
            }

            class ActivityStatus {
              - enum { Planned, InProgress, Completed, Cancelled } value
              + ActivityStatus value()
            }

            class TaskStatus {
              - enum { Pending, InProgress, Completed, Cancelled } value
              + TaskStatus value()
            }

            class ProgrammingStatus {
              - enum { Pending, InProgress, Completed, Cancelled } value
              + ProgrammingStatus value()
            }
          }
        }
        package infrastructure {
            package persistence {
                package jpa {
                    ' Interfaces que implementan el patrón Repository para la persistencia de datos
                }
            }
        }
        package application {
            package internal {
                package commandservices {
                    ' Clases que implementan las interfaces de servicios de comandos, ejecutando lógica de negocios relacionada con cambios de estado
                }
                package queryservices {
                    ' Clases que implementan las interfaces de servicios de consultas, para la obtención de datos del sistema
                }
            }
        }
        package interfaces {
            package rest {
                package resources {
                    ' Clases de tipo record que funcionan como DTOs (Data Transfer Objects), siguiendo los principios REST (se tratan como recursos)
                }
                package transform {
                    ' Clases con métodos estáticos para mapear entre recursos, comandos, consultas o entidades
                    ' Equivalente al patrón Assembler, puede ser denominado de esta manera
                }
                package controllers {
                    ' Clases que exponen los endpoints REST del sistema, permitiendo la interacción con el cliente
                }
            }
        }
    }
    package shared{
        package domain.model{
            package aggregates{
                class AuditableAbstractAggregateRoot {
                    ' Clase base para los agregados auditable, gestionando operaciones comunes
                }
            }
            package entities {
                class AuditableModel{
                    ' Entidad base que permite rastrear la auditoría de los cambios en los modelos
                }
            }
            package valueobjects {
                class tenantId {
                    'ujum'
                }
            }
        }
        package infrastructure.persistence.jpa.strategy {
            class SnakeCasePhysicalNamingStrategy {
                ' Estrategia de nombrado físico que convierte los identificadores a formato snake_case en la base de datos
                + Identifier toPhysicalCatalogName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                + Identifier toPhysicalSchemaName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                + Identifier toPhysicalTableName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                + Identifier toPhysicalSequenceName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                + Identifier toPhysicalColumnName(Identifier identifier, JdbcEnvironment jdbcEnvironment)
                - Identifier toSnakeCase(final Identifier identifier)
                - Identifier toSnakeCase(final Identifier identifier)
            }
        }
    }
}

package org.hibernate.boot.model.naming {
    interface PhysicalNamingStrategy {
        ' Interfaz para la estrategia de nombrado físico, utilizada para personalizar los nombres de las entidades en la base de datos
    }
}

@enduml
